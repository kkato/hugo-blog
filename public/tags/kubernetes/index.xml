<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on kkato.dev</title>
    <link>http://localhost:1313/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on kkato.dev</description>
    <image>
      <title>kkato.dev</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.140.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Jun 2024 21:20:47 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NUC上にk8sクラスタを構築する</title>
      <link>http://localhost:1313/posts/nuc-k8s/</link>
      <pubDate>Wed, 05 Jun 2024 21:20:47 +0900</pubDate>
      <guid>http://localhost:1313/posts/nuc-k8s/</guid>
      <description>&lt;p&gt;しばらく放置していたNUC上にk8sをインストールして、おうちクラスタを運用していこうと思います。
今回はkubeadmを使ってk8sをインストールしようと思います。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/nuc-k8s/nuc.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ベアメタル(Intel NUC11PAHi5)上に構築&lt;/li&gt;
&lt;li&gt;Control Planex1台とWorkerx3台の4台構成&lt;/li&gt;
&lt;li&gt;OSはRocky Linux9.3&lt;/li&gt;
&lt;li&gt;ルーター側の設定で固定IPを割り当て&lt;/li&gt;
&lt;li&gt;各ノードのスペックは以下&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;CPU&lt;/th&gt;
          &lt;th&gt;メモリ&lt;/th&gt;
          &lt;th&gt;ストレージ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;4コア&lt;/td&gt;
          &lt;td&gt;16GB&lt;/td&gt;
          &lt;td&gt;500GB&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;kubeadmのインストール&#34;&gt;kubeadmのインストール&lt;/h2&gt;
&lt;p&gt;以下の手順を参考にします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&#34;&gt;kubeadmのインストール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「始める前に」にSwapがオフであること、と記載がありますが、swapがオフになっていなかったので無効化します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo swapoff -a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ポートの開放&#34;&gt;ポートの開放&lt;/h3&gt;
&lt;p&gt;kubernetesのコンポーネントが互いに通信するために、&lt;a href=&#34;https://kubernetes.io/docs/reference/networking/ports-and-protocols/&#34;&gt;これらのポート&lt;/a&gt;を開く必要があります。
RockyはRHEL系なので&lt;code&gt;firewall-cmd&lt;/code&gt;を使って、Control Planeノードのポートを開放します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --add-port=6443/tcp --permanent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --add-port=2379-2380/tcp --permanent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --add-port=10250/tcp --permanent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --add-port=10257/tcp --permanent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --add-port=10259/tcp --permanent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ポートが開放されたことを確認します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --reload
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --list-ports
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;続いて各Workerノードのポートを開放します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-coonsole&#34; data-lang=&#34;coonsole&#34;&gt;sudo firewall-cmd --add-port=30000-32767/tcp --permanent
sudo firewall-cmd --add-port=10250/tcp --permanent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ポートが開放されたことを確認します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --reload
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo firewall-cmd --list-ports
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;コンテナランタイムのインストール&#34;&gt;コンテナランタイムのインストール&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/ja/docs/setup/production-environment/container-runtimes/&#34;&gt;コンテナランタイム&lt;/a&gt;の手順を参考に、各ノードに設定をしていきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Alertmanagerのwebhookを試してみる</title>
      <link>http://localhost:1313/posts/webhook-nginx/</link>
      <pubDate>Sun, 13 Aug 2023 13:11:42 +0900</pubDate>
      <guid>http://localhost:1313/posts/webhook-nginx/</guid>
      <description>&lt;p&gt;Kubernetes上でAlertmanagerがちゃんと通知できるか、どんな内容が通知されているのか確認してみようとすると、連携するためのSlackが必要であったり、Emailを送信するにもメールサーバが必要だったりと、意外と気軽に試せないということがありました。&lt;/p&gt;
&lt;p&gt;なので、今回はwebhookの機能を使ってNginxにリクエストを飛ばし、リクエストの内容をログから確認してみようと思います。&lt;/p&gt;
&lt;h2 id=&#34;webhookとは&#34;&gt;webhookとは?&lt;/h2&gt;
&lt;p&gt;Alertmanagerのreceiverには以下が指定できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/software/opsgenie&#34;&gt;Opesgenie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pagerduty.com/&#34;&gt;PagerDuty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pushover.net/&#34;&gt;Pushover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://slack.com/intl/ja-jp&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/sns/&#34;&gt;AWS SNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.splunk.com/en_us/about-splunk/acquisitions/splunk-on-call.html&#34;&gt;VictorOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Webhook&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wechat.com/ja/&#34;&gt;Wechat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.webex.com/ja/index.html&#34;&gt;Webex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Webhookとは特定のエンドポイントに対してHTTP POSTリクエストでアラートの情報を送信するというものです。
外部サービスではないので、自分自身でエンドポイントを用意し、自分自身で後続の処理を実装する必要があります。&lt;/p&gt;
&lt;p&gt;例えば、以下のように設定します。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;receivers:
- name: &amp;#34;nginx&amp;#34;
  webhook_configs:
  - url: &amp;#39;http://nginx-svc.default:8080/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;webhookの連携先としてnginxを使う&#34;&gt;webhookの連携先としてnginxを使う&lt;/h2&gt;
&lt;p&gt;今回はwebhookの連携先としてnginxを使用します。&lt;/p&gt;
&lt;p&gt;nginxを使って実現したいことは以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エンドポイントを用意する&lt;/li&gt;
&lt;li&gt;リクエスト内容を確認する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nginx.confの初期設定をベースにしていますが、そのままだとリクエスト内容を確認することができないので、設定を追加しました。
&lt;code&gt;log_format&lt;/code&gt;で&lt;code&gt;$request_body&lt;/code&gt;を指定し、&lt;code&gt;/&lt;/code&gt;にアクセスした時に&lt;code&gt;$request_body&lt;/code&gt;がログとして標準出力に出るように設定しています。&lt;/p&gt;
&lt;p&gt;しかし、&lt;code&gt;$request_body&lt;/code&gt;を有効化するには&lt;code&gt;proxy_pass&lt;/code&gt;などの後続処理が必要になります。なので、&lt;code&gt;proxy_pass&lt;/code&gt;で&lt;code&gt;/trash&lt;/code&gt;というエンドポイントにリクエストを転送し、&lt;code&gt;/trash&lt;/code&gt;で特に意味のない処理(1x1ピクセルのgifを返す)をしています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The variable’s value is made available in locations processed by the proxy_pass, fastcgi_pass, uwsgi_pass, and scgi_pass directives when the request body was read to a memory buffer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&#34;&gt;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
                      &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;
                      &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;

    access_log  /var/log/nginx/access.log  main;

    # -------------------追加設定---------------------
    log_format  postdata escape=none $request_body;

    server {
        listen   8080;
        location / {
            access_log /dev/stdout postdata;
            proxy_pass http://127.0.0.1:8080/trash;
        }
        location /trash {
            access_log off;
            empty_gif;
            break;
        }
    }
    # ----------------------------------------------

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記の設定をConfigMapとして作成し、nginxのPodに対してConfigMapをマウントしてあげます。&lt;code&gt;nginx-svc&lt;/code&gt;というServiceも作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのCronJobが失敗したときにアラートをあげる</title>
      <link>http://localhost:1313/posts/k8s-job-alert/</link>
      <pubDate>Tue, 08 Aug 2023 19:48:39 +0900</pubDate>
      <guid>http://localhost:1313/posts/k8s-job-alert/</guid>
      <description>&lt;p&gt;CronJobは、指定したcronフォーマットに基づいて定期的にJobを実行するという機能です。
主にバックアップの取得やメール送信など、定期的な処理を実行する際に便利です。&lt;/p&gt;
&lt;p&gt;一方で、CronJobが失敗した際にどのように検知すべきかについては、あまり情報がありませんでした。
なので、今回はそちらについて考えてみたいと思います。&lt;/p&gt;
&lt;h2 id=&#34;kube-state-metricsを活用する&#34;&gt;kube-state-metricsを活用する&lt;/h2&gt;
&lt;p&gt;kube-state-metricsとはKubernetesクラスタ内のリソースの状態をメトリクスとして提供してくれるというものです。
kube-state-metricsではCronJobやJobの状態をメトリクスとして取得することができます。
この方式採用している記事が多かったので、こちらで検討を進めてみたいと思います。&lt;/p&gt;
&lt;p&gt;※記事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tristan_96324/prometheus-k8s-cronjob-alerts-94bee7b90511&#34;&gt;https://medium.com/@tristan_96324/prometheus-k8s-cronjob-alerts-94bee7b90511&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.giffgaff.io/tech/monitoring-kubernetes-jobs&#34;&gt;https://www.giffgaff.io/tech/monitoring-kubernetes-jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;どのメトリクスを使い監視するか&#34;&gt;どのメトリクスを使い監視するか&lt;/h2&gt;
&lt;p&gt;CronJobはcronフォーマットで指定された時刻にJobを生成し、そのJobがPodを生成するという3層の親子構造になっています。
また、CronJobとJobの関係は1対多で、JobとPodの関係は1対多になります。&lt;/p&gt;
&lt;p&gt;Jobが完了するのは&lt;code&gt;completions&lt;/code&gt;個のPodが正常終了した場合、もしくは&lt;code&gt;backoffLimit&lt;/code&gt;個のPodが異常終了した場合に限ります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;completions
&lt;ul&gt;
&lt;li&gt;completions個のPodが成功すると、Jobが完了したとみなされる&lt;/li&gt;
&lt;li&gt;デフォルトは1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;backoffLimit
&lt;ul&gt;
&lt;li&gt;失敗したと判断するまでの再試行回数で、この回数を超えるとJobは失敗とみなされる&lt;/li&gt;
&lt;li&gt;デフォルトは6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そして、アラートを上げたいのはJobが失敗した時です。言い換えると、&lt;code&gt;backoffLimit&lt;/code&gt;個のPodが異常終了したときにアラートを上げるということになります。
何個のPodが異常終了したのか監視することも可能だと思いますが、ここではJobのステータスを監視するのが適切かと思います。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;メトリクス&lt;/th&gt;
          &lt;th&gt;対応する項目&lt;/th&gt;
          &lt;th&gt;説明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;kube_job_status_succeeded&lt;/td&gt;
          &lt;td&gt;.status.succeeded&lt;/td&gt;
          &lt;td&gt;Jobの管理下で正常終了したPodの数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;kube_job_status_failed&lt;/td&gt;
          &lt;td&gt;.status.failed&lt;/td&gt;
          &lt;td&gt;Jobの管理下で異常終了したPodの数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;kube_job_complete&lt;/td&gt;
          &lt;td&gt;.status.conditions.type&lt;/td&gt;
          &lt;td&gt;Jobが成功したかどうか&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;kube_job_failed&lt;/td&gt;
          &lt;td&gt;.status.conditions.type&lt;/td&gt;
          &lt;td&gt;Jobが失敗したかどうか&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics/blob/main/docs/job-metrics.md&#34;&gt;https://github.com/kubernetes/kube-state-metrics/blob/main/docs/job-metrics.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jobに関するメトリクスは複数ありますが、この中でも特に&lt;code&gt;kube_job_failed&lt;/code&gt;を使ってアラートを上げるのが良さそうです。
以下の設定だと、Jobが失敗したときにアラートが上がります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kube_job_failed &amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;アラートが発火し続けてしまう問題&#34;&gt;アラートが発火し続けてしまう問題&lt;/h2&gt;
&lt;p&gt;失敗したJobは削除されずに残り続けるので、アラートが発火し続けてしまいます。
なので、Jobの&lt;code&gt;ttlSecondsAfterFinished&lt;/code&gt;を設定し、数分後にJobが削除されるようにします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ttlSecondsAfterFinished
&lt;ul&gt;
&lt;li&gt;指定秒後にJobを削除できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CronJobの&lt;code&gt;failedJobsHistoryLimit&lt;/code&gt;を設定するという方法も思いつきましたが、0にしてしまうとそもそもアラートが上がらないと思うので、こちらは1のままにしておきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;failedJobsHistoryLimit
&lt;ul&gt;
&lt;li&gt;失敗したJobを指定個数分残しておける&lt;/li&gt;
&lt;li&gt;デフォルトは1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回はkube-state-metricsを活用して、CronJobが失敗した時のアラートを設定しました。他にもっといい方法をご存知の方は教えていただけるとありがたいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>kubesprayでk8sクラスタを構築する</title>
      <link>http://localhost:1313/posts/kubespray/</link>
      <pubDate>Mon, 01 May 2023 10:07:31 +0900</pubDate>
      <guid>http://localhost:1313/posts/kubespray/</guid>
      <description>&lt;p&gt;k8s構築ツールはいろいろありますが、公式ドキュメントでは以下が紹介されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/ja/docs/setup/learning-environment/&#34;&gt;学習環境&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Minikube&lt;/li&gt;
&lt;li&gt;Kind&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/ja/docs/setup/production-environment/&#34;&gt;プロダクション環境&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;kubeadm&lt;/li&gt;
&lt;li&gt;kops&lt;/li&gt;
&lt;li&gt;kubespray&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※各ツールの違いについては&lt;a href=&#34;https://github.com/kubernetes-sigs/kubespray/blob/master/docs/comparisons.md&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回はその中でも&lt;a href=&#34;https://github.com/kubernetes-sigs/kubespray&#34;&gt;kubespray&lt;/a&gt;というツールを使ってk8sクラスタを構築してみようと思います。kubeadmは1台ずつインストールを実施するのに対し、kubesprayはAnsibleを使い、各ノードで一斉にインストールを実施します。なので、kubesprayは台数が多いときに便利です。&lt;/p&gt;
&lt;p&gt;ちなみに、kubesprayは内部でkubeadmを使っているので、kubespray = kubeadm + Ansibleという感じです。また、kubesprayを使うと、コンテナランタイム(デフォルトはcontainerd)やPod間通信のネットワークプラグイン(デフォルトはcalico)などが自動でインストールされるので、非常に便利です。&lt;/p&gt;
&lt;h2 id=&#34;構築&#34;&gt;構築&lt;/h2&gt;
&lt;p&gt;前提:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ベアメタル(Intel NUC11PAHi5)上に構築&lt;/li&gt;
&lt;li&gt;Control Planex1台とWorkerx3台の4台構成&lt;/li&gt;
&lt;li&gt;OSはRocky Linux9.1&lt;/li&gt;
&lt;li&gt;ルーター側の設定で固定IPを割り当て&lt;/li&gt;
&lt;li&gt;各ノードのスペックは以下&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;CPU&lt;/th&gt;
          &lt;th&gt;メモリ&lt;/th&gt;
          &lt;th&gt;ストレージ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;4コア&lt;/td&gt;
          &lt;td&gt;16GB&lt;/td&gt;
          &lt;td&gt;500GB&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ssh公開認証の設定&#34;&gt;ssh公開認証の設定&lt;/h3&gt;
&lt;p&gt;手元のPCからパスワードなしでssh接続できるように公開鍵認証の設定をします。
ssh-keygenのパスワードには空文字を指定します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@bastion:~$ ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@bastion:~$ scp ~/.ssh/id_rsa.pub 192.168.10.xxx:~/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;公開鍵の情報を各ノードのauthorized_keysに追記します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@nuc01:~$ mkdir ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@nuc01:~$ chmod &lt;span class=&#34;m&#34;&gt;700&lt;/span&gt; /.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@nuc01:~$ cat id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@nuc01:~$ chmod &lt;span class=&#34;m&#34;&gt;600&lt;/span&gt; ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;etchostsの編集&#34;&gt;/etc/hostsの編集&lt;/h3&gt;
&lt;p&gt;手元のPCから各ノードへホスト名で接続できるように、/etc/hostsを編集します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kkato@bastion:~$ cat /etc/hosts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;192.168.10.121 nuc01
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;192.168.10.122 nuc02
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;192.168.10.123 nuc03
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;192.168.10.124 nuc04
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ユーザーの設定&#34;&gt;ユーザーの設定&lt;/h3&gt;
&lt;p&gt;各ノードのユーザーがパスワードなしでsudo実行できるよう設定します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Raspberry Pi上にk8sクラスタを構築する</title>
      <link>http://localhost:1313/posts/raspi-k8s/</link>
      <pubDate>Sun, 23 Apr 2023 16:13:42 +0900</pubDate>
      <guid>http://localhost:1313/posts/raspi-k8s/</guid>
      <description>&lt;p&gt;最近ラズパイを手に入れたので、kubeadmを使ってk8sクラスタを組んでみたいと思います。
Control Planeノードx1 Workerノードx3の構成です。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/raspi-k8s/raspi-cluster.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;
&lt;p&gt;準備したものは以下のとおりです。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;アイテム&lt;/th&gt;
          &lt;th&gt;個数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.switch-science.com/products/5680&#34;&gt;Raspberry Pi 4 Model B / 4GB&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.switch-science.com/products/7172?_pos=1&amp;amp;_sid=e013ece27&amp;amp;_ss=r&#34;&gt;Raspberry Pi PoE+ HAT&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/8DQ2Vjn&#34;&gt;ケース&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/1a7lXpn&#34;&gt;microSD 64GB&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/6lrvPog&#34;&gt;スイッチングハブ&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/cSs0irO&#34;&gt;LANケーブル 0.15m&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/0IejUmF&#34;&gt;LANケーブル 1m&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/4oTN3E9&#34;&gt;SDカードリーダー&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://amzn.asia/d/a8TZ1OH&#34;&gt;HDMI変換アダプター&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;PoE(Power over Ethernet)+ HATを使うと、LANケーブルから電源供給できるのでとても便利です。今回はPoE+ HATを使っているので、スイッチングハブもPoE対応のものを購入しています。ラズパイのOSをSDカードにインストールする必要があるので、SDカードリーダーも購入しました。あとは、ディスプレイと繋ぐときにmicro HDMIに変換するためのアダプタも購入しました。&lt;/p&gt;
&lt;h2 id=&#34;osの設定&#34;&gt;OSの設定&lt;/h2&gt;
&lt;h3 id=&#34;osのインストール&#34;&gt;OSのインストール&lt;/h3&gt;
&lt;p&gt;手元のPCはUbuntu 22.04 LTSなので、以下のコマンドでRaspberry Pi Imagerをインストールします。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt install rpi-imager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そして、microSDカード4枚全てにUbuntu Server 22.10 (64-bit)を焼きます。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rpi-imager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/raspi-k8s/raspi-imager.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;microSDカードを差し込み、ディスプレイ(micro HDMI)とキーボード(USB)を接続し、OSの初期設定を行います。初期ユーザー名とパスワードはubuntuです。パッケージを最新にしておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo spy update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt upgrade -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新しくユーザを作成し、ユーザにsudo権限を付与します。sudoをパスワードなしでできるように追加の設定もします。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
